libdecor-gtk-WARNING: Failed to initialize GTK
Failed to load plugin 'libdecor-gtk.so': failed to init
debug: Loaded latin font at size 16: NotoSans-Regular
debug: Loaded latin font at size 16: NotoSans-Bold
debug: Loaded latin font at size 16: NotoSans-Italic
debug: Loaded latin font at size 16: NotoSans-BoldItalic
debug: Loaded cjk font at size 16: NotoSansCJK-VF
debug: Loaded emoji font at size 16: NotoColorEmoji
info: showing default html
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 115 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 105 } glyph for key 0
caching { 116 } glyph for key 0
caching { 108 } glyph for key 0
caching { 101 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 32 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 32 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 97 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 115 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 104 } glyph for key 0
caching { 101 } glyph for key 0
caching { 97 } glyph for key 0
caching { 100 } glyph for key 0
caching { 101 } glyph for key 0
caching { 114 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 115 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 112 } glyph for key 0
caching { 97 } glyph for key 0
caching { 114 } glyph for key 0
caching { 97 } glyph for key 0
caching { 103 } glyph for key 0
caching { 114 } glyph for key 0
caching { 97 } glyph for key 0
caching { 112 } glyph for key 0
caching { 104 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 70 } glyph for key 0
caching { 111 } glyph for key 0
caching { 110 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 86 } glyph for key 0
caching { 101 } glyph for key 0
caching { 114 } glyph for key 0
caching { 105 } glyph for key 0
caching { 102 } glyph for key 0
caching { 105 } glyph for key 0
caching { 99 } glyph for key 0
caching { 97 } glyph for key 0
caching { 116 } glyph for key 0
caching { 105 } glyph for key 0
caching { 111 } glyph for key 0
caching { 110 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 115 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 80 } glyph for key 0
caching { 97 } glyph for key 0
caching { 103 } glyph for key 0
caching { 101 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 76 } glyph for key 0
caching { 97 } glyph for key 0
caching { 116 } glyph for key 0
caching { 105 } glyph for key 0
caching { 110 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 120 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 104 } glyph for key 0
caching { 101 } glyph for key 0
caching { 32 } glyph for key 0
caching { 113 } glyph for key 0
caching { 117 } glyph for key 0
caching { 105 } glyph for key 0
caching { 99 } glyph for key 0
caching { 107 } glyph for key 0
caching { 32 } glyph for key 0
caching { 98 } glyph for key 0
caching { 114 } glyph for key 0
caching { 111 } glyph for key 0
caching { 119 } glyph for key 0
caching { 110 } glyph for key 0
caching { 32 } glyph for key 0
caching { 102 } glyph for key 0
caching { 111 } glyph for key 0
caching { 120 } glyph for key 0
caching { 32 } glyph for key 0
<b> => is_bold = true
caching { 106 } glyph for key 1
caching { 117 } glyph for key 1
caching { 109 } glyph for key 1
caching { 112 } glyph for key 1
caching { 115 } glyph for key 1
</b> => is_bold = false
caching { 32 } glyph for key 0
caching { 111 } glyph for key 0
caching { 118 } glyph for key 0
caching { 101 } glyph for key 0
caching { 114 } glyph for key 0
caching { 32 } glyph for key 0
caching { 116 } glyph for key 0
caching { 104 } glyph for key 0
caching { 101 } glyph for key 0
caching { 32 } glyph for key 0
caching { 108 } glyph for key 0
caching { 97 } glyph for key 0
caching { 122 } glyph for key 0
caching { 121 } glyph for key 0
caching { 32 } glyph for key 0
caching { 100 } glyph for key 0
caching { 111 } glyph for key 0
caching { 103 } glyph for key 0
caching { 46 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 67 } glyph for key 0
caching { 74 } glyph for key 0
caching { 75 } glyph for key 0
caching { 32 } glyph for key 0
caching { 84 } glyph for key 0
caching { 101 } glyph for key 0
caching { 120 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 67 } glyph for key 0
caching { 58 } glyph for key 0
caching { 32 } glyph for key 0
caching { 228, 189, 160 } glyph for key 0
caching { 229, 165, 189 } glyph for key 0
caching { 239, 188, 140 } glyph for key 0
caching { 228, 184, 150 } glyph for key 0
caching { 231, 149, 140 } glyph for key 0
caching { 239, 188, 129 } glyph for key 0
caching { 232, 191, 153 } glyph for key 0
caching { 230, 152, 175 } glyph for key 0
caching { 228, 184, 128 } glyph for key 0
caching { 228, 184, 170 } glyph for key 0
caching { 230, 181, 139 } glyph for key 0
caching { 232, 175, 149 } glyph for key 0
caching { 233, 161, 181 } glyph for key 0
caching { 233, 157, 162 } glyph for key 0
caching { 227, 128, 130 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 74 } glyph for key 0
caching { 58 } glyph for key 0
caching { 32 } glyph for key 0
caching { 227, 129, 147 } glyph for key 0
caching { 227, 130, 147 } glyph for key 0
caching { 227, 129, 171 } glyph for key 0
caching { 227, 129, 161 } glyph for key 0
caching { 227, 129, 175 } glyph for key 0
caching { 227, 128, 129 } glyph for key 0
caching { 228, 184, 150 } glyph for key 0
caching { 231, 149, 140 } glyph for key 0
caching { 239, 188, 129 } glyph for key 0
caching { 227, 129, 147 } glyph for key 0
caching { 227, 130, 140 } glyph for key 0
caching { 227, 129, 175 } glyph for key 0
caching { 227, 131, 134 } glyph for key 0
caching { 227, 130, 185 } glyph for key 0
caching { 227, 131, 136 } glyph for key 0
caching { 227, 131, 154 } glyph for key 0
caching { 227, 131, 188 } glyph for key 0
caching { 227, 130, 184 } glyph for key 0
caching { 227, 129, 167 } glyph for key 0
caching { 227, 129, 153 } glyph for key 0
caching { 227, 128, 130 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 75 } glyph for key 0
caching { 58 } glyph for key 0
caching { 32 } glyph for key 0
caching { 236, 149, 136 } glyph for key 0
caching { 235, 133, 149 } glyph for key 0
caching { 237, 149, 152 } glyph for key 0
caching { 236, 132, 184 } glyph for key 0
caching { 236, 154, 148 } glyph for key 0
caching { 44 } glyph for key 0
caching { 32 } glyph for key 0
caching { 236, 132, 184 } glyph for key 0
caching { 234, 179, 132 } glyph for key 0
caching { 33 } glyph for key 0
caching { 32 } glyph for key 0
caching { 236, 157, 180 } glyph for key 0
caching { 234, 178, 131 } glyph for key 0
caching { 236, 157, 128 } glyph for key 0
caching { 32 } glyph for key 0
caching { 237, 133, 140 } glyph for key 0
caching { 236, 138, 164 } glyph for key 0
caching { 237, 138, 184 } glyph for key 0
caching { 32 } glyph for key 0
caching { 237, 142, 152 } glyph for key 0
caching { 236, 157, 180 } glyph for key 0
caching { 236, 167, 128 } glyph for key 0
caching { 236, 158, 133 } glyph for key 0
caching { 235, 139, 136 } glyph for key 0
caching { 235, 139, 164 } glyph for key 0
caching { 46 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 69 } glyph for key 0
caching { 109 } glyph for key 0
caching { 111 } glyph for key 0
caching { 106 } glyph for key 0
caching { 105 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 72 } glyph for key 0
caching { 101 } glyph for key 0
caching { 114 } glyph for key 0
caching { 101 } glyph for key 0
caching { 32 } glyph for key 0
caching { 105 } glyph for key 0
caching { 115 } glyph for key 0
caching { 32 } glyph for key 0
caching { 116 } glyph for key 0
caching { 101 } glyph for key 0
caching { 120 } glyph for key 0
caching { 116 } glyph for key 0
caching { 32 } glyph for key 0
caching { 240, 159, 152, 128 } glyph for key 0
caching { 240, 159, 152, 131 } glyph for key 0
caching { 240, 159, 152, 141 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
caching { 32 } glyph for key 0
error(gpa): memory address 0x7f9b25aae000 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25aae200 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25aae400 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0000 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0200 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0400 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0600 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0800 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0a00 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0c00 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

error(gpa): memory address 0x7f9b25ab0e00 leaked: 
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1605:53: 0x14d2ec7 in allocate (zibra)
            const slice = try allocator.alignedAlloc(u8, max_align, total_size);
                                                    ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1562:29: 0x14bd901 in grow (zibra)
            try map.allocate(allocator, new_cap);
                            ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1512:30: 0x1422204 in growIfNeeded (zibra)
                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);
                             ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1333:34: 0x13983ae in getOrPutContextAdapted__anon_28806 (zibra)
                self.growIfNeeded(allocator, 1, ctx) catch |err| {
                                 ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1318:56: 0x13272b0 in getOrPutContext (zibra)
            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);
                                                       ^
/home/braheezy/.config/Code/User/globalStorage/ziglang.vscode-zig/zig/linux-x86_64-0.13.0/lib/std/hash_map.zig:1244:52: 0x1271893 in putContext (zibra)
            const result = try self.getOrPutContext(allocator, key, ctx);
                                                   ^

